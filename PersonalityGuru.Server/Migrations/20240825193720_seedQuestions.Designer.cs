// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalityGuru.Server;

#nullable disable

namespace PersonalityGuru.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240825193720_seedQuestions")]
    partial class seedQuestions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonalityGuru.Server.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InvertedScore")
                        .HasColumnType("bit");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я вижу красоту и смыслы там, где другие их не видят"
                        },
                        new
                        {
                            Id = 2,
                            Group = "O",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Если человек мне не нравится, я не восприму его аргументы впринципе"
                        },
                        new
                        {
                            Id = 3,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне нравится изучать и постигать что-либо, я с интересом учусь новому"
                        },
                        new
                        {
                            Id = 4,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я постоянно увлекаюсь новыми идеями"
                        },
                        new
                        {
                            Id = 5,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Некоторым людям мое мышление может показаться нестандартным и даже странным"
                        },
                        new
                        {
                            Id = 6,
                            Group = "O",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Меня больше интересуют конкретика, процессы и детали, нежели общие идеи и концепции"
                        },
                        new
                        {
                            Id = 7,
                            Group = "O",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Меня редко увлекают произведения искусства и музыки, арт объекты и др."
                        },
                        new
                        {
                            Id = 8,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Увлекаясь, я забываю обо всем"
                        },
                        new
                        {
                            Id = 9,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне нравится мечтать, я наслаждаюсь \"дикими\" полетами фантазии"
                        },
                        new
                        {
                            Id = 10,
                            Group = "O",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Люди говорят обо мне как о заземленном и практичном человеке"
                        },
                        new
                        {
                            Id = 11,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я всё время что-то придумываю или адаптирую под себя"
                        },
                        new
                        {
                            Id = 12,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне тяжело найти себя, определить свое направление"
                        },
                        new
                        {
                            Id = 13,
                            Group = "O",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я быстро адаптируюсь к новым обстоятельствам, задачам и изменениям"
                        },
                        new
                        {
                            Id = 14,
                            Group = "O",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я не люблю тратить время на глубокие размышления и филосовствования"
                        },
                        new
                        {
                            Id = 15,
                            Group = "O",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я всегда выбераю точные специализации и навыки"
                        },
                        new
                        {
                            Id = 16,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я ценю чистоту и порядок по всем"
                        },
                        new
                        {
                            Id = 17,
                            Group = "К",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я редко читаю что-либо о самоорганизации и менеджменте времени"
                        },
                        new
                        {
                            Id = 18,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне свойственны настойчивость, скрупулезность и качество в делах"
                        },
                        new
                        {
                            Id = 19,
                            Group = "К",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "У меня достаточно свободного времени"
                        },
                        new
                        {
                            Id = 20,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я могу быть упертым и настаивать на своем, не люблю компромиссы"
                        },
                        new
                        {
                            Id = 21,
                            Group = "К",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я не люблю ответственность и избегаю ее"
                        },
                        new
                        {
                            Id = 22,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Многие считают меня высокомерным(ой) и отстраненным(ой)"
                        },
                        new
                        {
                            Id = 23,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне легко приступать к действиям и задачам"
                        },
                        new
                        {
                            Id = 24,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я усидчивый, дисциплинированный и последовательный человек"
                        },
                        new
                        {
                            Id = 25,
                            Group = "К",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Мне несложно соврать, придумать \"на ходу\" или приукрасить некоторые вещи"
                        },
                        new
                        {
                            Id = 26,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я все делаю быстро"
                        },
                        new
                        {
                            Id = 27,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я добился(лась) в жизни многого своим трудом"
                        },
                        new
                        {
                            Id = 28,
                            Group = "К",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Предпочитаю \"двигаться в потоке\", редко планирую и решаю все по ходу"
                        },
                        new
                        {
                            Id = 29,
                            Group = "К",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Перед любым выбором я взвешиваю \"за\" и \"против\"	"
                        },
                        new
                        {
                            Id = 30,
                            Group = "К",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Мне не нравится иметь четкий план и расписание"
                        },
                        new
                        {
                            Id = 31,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне нравится чувствовать адреналин"
                        },
                        new
                        {
                            Id = 32,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я довольно быстро и громко говорю"
                        },
                        new
                        {
                            Id = 33,
                            Group = "Э",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "У меня спокойный и размеренный ритм мышления и жизни"
                        },
                        new
                        {
                            Id = 34,
                            Group = "Э",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я переписываюсь лучше, чем общаюсь вживую"
                        },
                        new
                        {
                            Id = 35,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Среди людей я чувствую себя как рыба в воде"
                        },
                        new
                        {
                            Id = 36,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне нравится необычно одеваться и привлекать к себе внимание"
                        },
                        new
                        {
                            Id = 37,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне интересно проводить время с другими людьми"
                        },
                        new
                        {
                            Id = 38,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я люблю большие компании и хорошие вечеринки"
                        },
                        new
                        {
                            Id = 39,
                            Group = "Э",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я не люблю, когда жизнь течет быстро и каждый день что-то происходит"
                        },
                        new
                        {
                            Id = 40,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я верю, что все возможно, и у меня все получится"
                        },
                        new
                        {
                            Id = 41,
                            Group = "Э",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Между встречей с людьми и уединением я чаще выберу уединение"
                        },
                        new
                        {
                            Id = 42,
                            Group = "Э",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я не очень-то общительный и разговорчивый человек"
                        },
                        new
                        {
                            Id = 43,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я постоянно в движении, мне сложно усидеть на месте"
                        },
                        new
                        {
                            Id = 44,
                            Group = "Э",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я люблю, когда меня хвалят и отмечают мои достижения"
                        },
                        new
                        {
                            Id = 45,
                            Group = "Э",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я люблю тишину, спокойствие и обособленность"
                        },
                        new
                        {
                            Id = 46,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я могу пожертвовать своими интересами и временем ради других"
                        },
                        new
                        {
                            Id = 47,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне неспокойно, когда другие чувствуют себя плохо"
                        },
                        new
                        {
                            Id = 48,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне легко понять мотивы и боли других людей"
                        },
                        new
                        {
                            Id = 49,
                            Group = "А",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я часто бываю безжалостен(на), требователен(на) к другим"
                        },
                        new
                        {
                            Id = 50,
                            Group = "А",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я не испытываю желания ни о ком заботиться или поддерживать"
                        },
                        new
                        {
                            Id = 51,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я отзывчивый, доброжелательный и терпеливый человек"
                        },
                        new
                        {
                            Id = 52,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне тяжело спорить с теми, кто выше меня по статусу"
                        },
                        new
                        {
                            Id = 53,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я верю в то, что у большинства людей добрые намерения"
                        },
                        new
                        {
                            Id = 54,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я стараюсь предугадать потребности людей в моем окружении"
                        },
                        new
                        {
                            Id = 55,
                            Group = "А",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я могу намеренно причинить эмоциональную боль другому человеку"
                        },
                        new
                        {
                            Id = 56,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "На работе я легко подчиняюсь руководителю и становлюсь его доверенным лицом"
                        },
                        new
                        {
                            Id = 57,
                            Group = "А",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Мне не особенно важно, что думают и чувствуют другие"
                        },
                        new
                        {
                            Id = 58,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я избегаю конфликтов и стараюсь найти общий язык с людьми, иногда действуя себе в ущерб"
                        },
                        new
                        {
                            Id = 59,
                            Group = "А",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Мне интереснее сотрудничать и взаимодействовать, чем конкурировать"
                        },
                        new
                        {
                            Id = 60,
                            Group = "А",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Мне легко выражать свое мнение, даже если с ним никто не согласен"
                        },
                        new
                        {
                            Id = 61,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я часто прокручиваю в голове слова людей, которые меня задели"
                        },
                        new
                        {
                            Id = 62,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я часто представляю худший сценарий"
                        },
                        new
                        {
                            Id = 63,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Меня раздражают уверенные в себе, громкие люди"
                        },
                        new
                        {
                            Id = 64,
                            Group = "Н",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "У меня в жизни мало поводов для беспокойства"
                        },
                        new
                        {
                            Id = 65,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я часто себя унижаю, думаю о себе плохо"
                        },
                        new
                        {
                            Id = 66,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я часто о чем-то переживаю, чувствую тревогу и напряжение"
                        },
                        new
                        {
                            Id = 67,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "После сильных негативных эмоций мне нужно время, чтобы прийти в себя. Я медленно отхожу"
                        },
                        new
                        {
                            Id = 68,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Меня легко зацепить, расстроить или обидеть"
                        },
                        new
                        {
                            Id = 69,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "У меня часто меняется настроение"
                        },
                        new
                        {
                            Id = 70,
                            Group = "Н",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Большую часть времени я расслаблен(а)"
                        },
                        new
                        {
                            Id = 71,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я легко впадаю в негатив, страдания и депрессию"
                        },
                        new
                        {
                            Id = 72,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Если я злюсь или расстроен(а), это всегда по мне видно"
                        },
                        new
                        {
                            Id = 73,
                            Group = "Н",
                            InvertedScore = true,
                            TestId = 1,
                            Text = "Я сохраняю спокойствие даже под давлением"
                        },
                        new
                        {
                            Id = 74,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я склонен(на) описывать происходящее не в свою пользу"
                        },
                        new
                        {
                            Id = 75,
                            Group = "Н",
                            InvertedScore = false,
                            TestId = 1,
                            Text = "Я часто подозреваю скрытые мотивы у других"
                        });
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "OKЭАН"
                        });
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.UserTestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerOption")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserTestSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserTestSessionId");

                    b.ToTable("UserTestAnswers");
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.UserTestSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTestSessions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalityGuru.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalityGuru.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalityGuru.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalityGuru.Server.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.Question", b =>
                {
                    b.HasOne("PersonalityGuru.Shared.Models.Questionnaire", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.UserTestAnswer", b =>
                {
                    b.HasOne("PersonalityGuru.Shared.Models.UserTestSession", "UserTestSession")
                        .WithMany()
                        .HasForeignKey("UserTestSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTestSession");
                });

            modelBuilder.Entity("PersonalityGuru.Shared.Models.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
