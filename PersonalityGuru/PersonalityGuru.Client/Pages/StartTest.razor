@page "/start"

@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using PersonalityGuru.Shared
@using PersonalityGuru.Shared.Models
@using System.Security.Claims
@rendermode InteractiveAuto
@inject NavigationManager NavManager
@inject HttpClient client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ClientUserState userState


@attribute [Authorize]

<PageTitle>Начать тест</PageTitle>

<AuthorizeView>
    <div class="d-flex flex-column" style="min-height: 93vh">
        <div class="d-flex align-middle flex-grow-1">
            <div class="col-5" />
            <div class="col-2 d-flex align-items-center justify-content-center">
                <div>
                    <div>
                        <h2>Добро пожаловать, @context.User.Identity?.Name!</h2>
                    </div>
                    <div>
                        <button class="btn btn-primary w-100" width="100%" @onclick="StartQuestionnaire">Начать тест</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>

@code {
    private async Task StartQuestionnaire()
    {
        var userId = await GetUserId();
        if (userId == null) return;

        var request = new HttpRequestMessage(HttpMethod.Post, $"/api/users/{userId}/questionnaire/1/start");
        request.Headers.Add("Origin", "https://localhost:7165");
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var json = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,

        };
        CurrentQuestionnaire? current = JsonSerializer.Deserialize<CurrentQuestionnaire>(json, options);
        userState.CurrentQuestionnaire = current;
        NavManager.NavigateTo("/question");
    }

    private void ToHomePage() => NavManager.NavigateTo("/");

    private async Task<string?> GetUserId() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var all = user?.Claims.Select(x => new { x.Type, x.Value }).ToList();
        return user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
    }
 }