@page "/admin/{userId}"
@using System.Text.Json
@using PersonalityGuru.Shared.Models

@inject HttpClient client
@inject NavigationManager Navigation

@if (!loadedUser)
{
    <div class="vh-100 d-flex justify-content-center align-items-center">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid"
             style="shape-rendering: auto; display: block; background: rgb(255, 255, 255);" width="200" height="200"
             xmlns:xlink="http://www.w3.org/1999/xlink">
            <g>
                <rect fill="#e15b64" height="40" width="15" y="30" x="17.5">
                    <animate begin="-0.2631578947368421s" keySplines="0 0.5 0.5 1;0 0.5 0.5 1" values="18;30;30"
                             keyTimes="0;0.5;1" calcMode="spline" dur="1.3157894736842106s" repeatCount="indefinite"
                             attributeName="y"></animate>
                    <animate begin="-0.2631578947368421s" keySplines="0 0.5 0.5 1;0 0.5 0.5 1" values="64;40;40"
                             keyTimes="0;0.5;1" calcMode="spline" dur="1.3157894736842106s" repeatCount="indefinite"
                             attributeName="height"></animate>
                </rect>
                <rect fill="#80c667" height="40" width="15" y="30" x="42.5">
                    <animate begin="-0.13157894736842105s" keySplines="0 0.5 0.5 1;0 0.5 0.5 1"
                             values="20.999999999999996;30;30" keyTimes="0;0.5;1" calcMode="spline"
                             dur="1.3157894736842106s" repeatCount="indefinite" attributeName="y"></animate>
                    <animate begin="-0.13157894736842105s" keySplines="0 0.5 0.5 1;0 0.5 0.5 1"
                             values="58.00000000000001;40;40" keyTimes="0;0.5;1" calcMode="spline"
                             dur="1.3157894736842106s" repeatCount="indefinite" attributeName="height"></animate>
                </rect>
                <rect fill="#7a64da" height="40" width="15" y="30" x="67.5">
                    <animate keySplines="0 0.5 0.5 1;0 0.5 0.5 1" values="20.999999999999996;30;30"
                             keyTimes="0;0.5;1" calcMode="spline" dur="1.3157894736842106s" repeatCount="indefinite"
                             attributeName="y"></animate>
                    <animate keySplines="0 0.5 0.5 1;0 0.5 0.5 1" values="58.00000000000001;40;40"
                             keyTimes="0;0.5;1" calcMode="spline" dur="1.3157894736842106s" repeatCount="indefinite"
                             attributeName="height"></animate>
                </rect>
                <g></g>
            </g>
        </svg>
    </div>
}

else
{
    <h1>@user.FullName</h1>
    <h3>@user.Email</h3>

    @if(user.SavedUserAnswers.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Completion time</th>
                    <th scope="col">О</th>
                    <th scope="col">К</th>
                    <th scope="col">Э</th>
                    <th scope="col">А</th>
                    <th scope="col">Н</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < user.SavedUserAnswers.Count; i++)
                {
                    <tr>
                        <th scope="row">@user.SavedUserAnswers[i].CompletedAt</th>
                        <td>@user.SavedUserAnswers[i].Result["O"]</td>
                        <td>@user.SavedUserAnswers[i].Result["К"]</td>
                        <td>@user.SavedUserAnswers[i].Result["Э"]</td>
                        <td>@user.SavedUserAnswers[i].Result["А"]</td>
                        <td>@user.SavedUserAnswers[i].Result["Н"]</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    else
    {
        <h3>This user hasn't completed the test yet</h3>
    }
}

@code {
    [Parameter]
    public string userId { get; set; }

    private User user;
    private bool loadedUser = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HttpRequestMessage request = new(HttpMethod.Get, $"/api/users/{userId}/{1}");
            request.Headers.Add("Origin", "https://localhost:7165");    
            HttpResponseMessage response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            user = JsonSerializer.Deserialize<User>(json, options);
            loadedUser = true;
            StateHasChanged();
        }
    }
}