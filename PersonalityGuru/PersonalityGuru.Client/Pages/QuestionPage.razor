@page "/question/{sessionId}/{questionnaireId}"

@rendermode InteractiveAuto
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient client

@using Blazored.LocalStorage
@using PersonalityGuru.Shared
@using PersonalityGuru.Shared.Models
@using PersonalityGuru;
@using System.Security.Claims
@using System.Text.Json

<head>
    <PageTitle>Question page</PageTitle>
</head>

<div class="progress questionnaire-progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
    <div class="progress-bar" style="width: @progress%"></div>
</div>
    <div class="vh-100 d-flex justify-content-center align-items-center">
        <div class="col-3" />
        <div class="flex-fill col-6">
            <div class="card" style="background-color: whitesmoke; margin-bottom: 16px; padding: 8px;">
                <h2>@QuestionText</h2>

                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="StronglyNo"
                           @onclick="@(answer => SelectOption(AnswerOption.StronglyNo))">
                    <label class="form-check-label" for="StronglyNo">
                        Точно нет
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="MaybeNo"
                           @onclick="@(answer => SelectOption(AnswerOption.MaybeNo))">
                    <label class="form-check-label" for="MaybeNo">
                        Скорее нет
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="Neutral"
                           @onclick="@(answer => SelectOption(AnswerOption.Neutral))">
                    <label class="form-check-label" for="Neutral">
                        Не знаю
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="MaybeYes"
                           @onclick="@(answer => SelectOption(AnswerOption.MaybeYes))">
                    <label class="form-check-label" for="MaybeYes">
                        Скорее да
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="StronglyYes"
                           @onclick="@(answer => SelectOption(AnswerOption.StronglyYes))">
                    <label class="form-check-label" for="StronglyYes">
                        Точно да
                    </label>
                </div>
            </div>

            <button class="btn btn-success" @onclick="NextQuestion">Слейдущий вопрос</button>
        </div>
        <div class="col-3" />
    </div>

@code {
    public int id { get; set; }
    private string QuestionText;

    [Parameter]
    public string SessionId { get; set; }
    [Parameter]
    public string QuestionnaireId { get; set; }

    private AnswerOption answer = AnswerOption.None;
    private NextQuestion? question;
    private int currentQuestion;
    private int questonniareLength;
    private int questionId;
    private float progress;
    private string userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userId = await GetUserId();
            await LoadNextQuestion();
        }
    }

    private async Task LoadNextQuestion() {
        HttpRequestMessage request = new(HttpMethod.Get, $"/api/users/{userId}/questionnaire/{SessionId}/nextQuestion");
        request.Headers.Add("Origin", "https://localhost:7165");
        HttpResponseMessage response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        string json = await response.Content.ReadAsStringAsync();

        if (string.IsNullOrEmpty(json))
        {
            HttpRequestMessage requestC = new(HttpMethod.Post, $"/api/users/{userId}/questionnaire/{QuestionnaireId}/{SessionId}/complete");
            requestC.Headers.Add("Origin", "https://localhost:7165");
            request.Content = new StringContent($"{{}}", null, "application/json");
            HttpResponseMessage responseC = await client.SendAsync(requestC);
            responseC.EnsureSuccessStatusCode();
            NavManager.NavigateTo("/result/" + QuestionnaireId);
            return;
        }

        JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        question = JsonSerializer.Deserialize<NextQuestion>(json, options);

        questionId = question.Id;
        QuestionText = question.Text;
        currentQuestion = question.AnsweredQuestionsCount + 1;
        questonniareLength = question.AllQuestionsCount;
        progress = (float)question.AnsweredQuestionsCount / (float)questonniareLength * 100f;

        StateHasChanged();
    }

    private async Task NextQuestion()
    {
        if (answer != AnswerOption.None)
        {
            HttpRequestMessage request = new(HttpMethod.Post, $"/api/users/{userId}/questionnaire/{SessionId}/storeAnswer/{questionId}");
            request.Headers.Add("Origin", "https://localhost:7165");
            request.Content = new StringContent($"{{\"answer\": {((int)answer).ToString()}}}", null, "application/json");
            HttpResponseMessage response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            
            await LoadNextQuestion();
        }
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var all = user?.Claims.Select(x => new { x.Type, x.Value }).ToList();
        return user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
    }

    private void SelectOption(AnswerOption option) => answer = option;
}