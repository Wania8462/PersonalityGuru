@page "/result/{questionnaireId}/{providedUserId:guid?}/{providedSessionId:guid?}"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient client

@using System.Security.Claims
@using System.Text.Json
@using PersonalityGuru.Shared.Models

<style>
    .background-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        z-index: -1;
    }
</style>

<img src="Images/OceanImg.jpg" alt="Background" style="height: 20%" class="background-image">
<div class="container-fluid h-90" style="padding-top: 20%">
    <div class="row">
        <div style="padding-left: 10%; padding-right: 10%">
            <h2>Результати тесту</h2>
            @if (result.Any())
            {
                <ul>
                    <li><b>Відкритість до досвіду: @result["O"]</b></li>
                    <li><b>Сумлінність: @result["К"]</b></li>
                    <li><b>Екстраверсія: @result["Э"]</b></li>
                    <li><b>Зговірливість: @result["А"]</b></li>
                    <li><b>Невротизм: @result["Н"]</b></li>
                </ul>
            }
            <p>Так тримати! Ви на правильному шляху до кращого розуміння себе.</p>
            <p>За детальною розшифровкою і аналізом звертайтесь до спеціаліста.</p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string questionnaireId { get; set; }
    
    [Parameter]
    public Guid? providedUserId { get; set; }

    [Parameter]
    public Guid? providedSessionId { get; set; }

    private Dictionary<string, double> result = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string userId = (providedUserId?.ToString()) ?? await GetUserId();
            string session = providedSessionId?.ToString() ?? "last";

            HttpRequestMessage request = new(HttpMethod.Get, $"/api/users/{userId}/questionnaire/{questionnaireId}/results/{session}");
            request.Headers.Add("Origin", "https://localhost:7165");
            HttpResponseMessage response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            SavedUserAnswers? answers = JsonSerializer.Deserialize<SavedUserAnswers>(json, options);

            result = answers.Result;
            StateHasChanged();
        }
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var all = user?.Claims.Select(x => new { x.Type, x.Value }).ToList();
        return user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
    }
}