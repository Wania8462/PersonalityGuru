@page "/result/{questionnaireId}"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient client

@using System.Security.Claims
@using System.Text.Json
@using PersonalityGuru.Shared.Models

<h1>Results</h1>

@if (result!=null)
{
    <h2>
        @result["O"]
        @result["К"]
        @result["Э"]
        @result["А"]
        @result["Н"]
    </h2>
}
    
else
{
    <h2>Oops, something went wrong.</h2>
}

@code {
    [Parameter]
    public string questionnaireId { get; set; }
    // [Parameter]
    // public string userId { get; set; }

    private Dictionary<string, float> result;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string userId = await GetUserId();
            HttpRequestMessage request = new(HttpMethod.Get, $"/api/users/{userId}/questionnaire/{questionnaireId}/results/last");
            request.Headers.Add("Origin", "https://localhost:7165");
            HttpResponseMessage response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            SavedUserAnswers? answers = JsonSerializer.Deserialize<SavedUserAnswers>(json, options);

            result = answers.Result;
            StateHasChanged();
        }
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var all = user?.Claims.Select(x => new { x.Type, x.Value }).ToList();
        return user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
    }
}