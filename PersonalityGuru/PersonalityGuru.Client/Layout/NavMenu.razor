@using System.Security.Claims
@implements IDisposable

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<NavMenu> Loc

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">@Loc["NavBarHeader"]</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="start">
                <span class="bi bi-questionnaire-nav-menu" aria-hidden="true"></span> @Loc["TestOcean"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="https://instagram.com/alice_minko?igshid=qa53uavvg9d6" target="_blank">
                <span class="bi bi-instagram-nav-menu" aria-hidden="true"></span> @Loc["InstagramLink"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="https://t.me/aliceminko" target="_blank">
                <span class="bi bi-telegram-nav-menu" aria-hidden="true"></span> @Loc["TelegramLink"]
            </NavLink>
        </div>

        @if (IsAdminUser ?? false)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admin">
                    <span class="bi bi-admin-nav-menu" aria-hidden="true"></span> @Loc["AdminPageLink"]
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private const string AdminRoleName = "AdminUser";
    private string? currentUrl;

    private bool? IsAdminUser;

    protected override async void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        if (IsAdminUser != true) 
        {
            IsAdminUser = await GetIsAdmin();
            StateHasChanged();
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task<bool> GetIsAdmin()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var adminClaim = user?.Claims.FirstOrDefault(x => x.Type == AdminRoleName);
        return adminClaim?.Value == "true";
    }
}

